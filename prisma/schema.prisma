generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  uploadedBooks Book[]           @relation("UploadedBooks")
  library       LibraryItem[]
  bookmarks     Bookmark[]
  reviews       Review[]
  readingProgress ReadingProgress[]
  recentlyRead  RecentlyRead[]
  downloads     Download[]

  @@map("users")
}

model Book {
  id          String   @id @default(uuid())
  title       String
  author      String
  description String   @db.Text
  genre       String
  language    String
  coverImage  String
  content     String   @db.Text
  pageCount   Int      @default(0)
  isPublic    Boolean  @default(true)
  uploadedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  uploader        User?             @relation("UploadedBooks", fields: [uploadedBy], references: [id], onDelete: Cascade)
  chapters        Chapter[]
  library         LibraryItem[]
  bookmarks       Bookmark[]
  reviews         Review[]
  readingProgress ReadingProgress[]
  recentlyRead    RecentlyRead[]
  downloads       Download[]

  @@map("books")
}

model Chapter {
  id        String   @id @default(uuid())
  bookId    String
  title     String
  startPage Int
  endPage   Int
  order     Int
  createdAt DateTime @default(now())

  // Relations
  book          Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)
  subchapters   Subchapter[]

  @@map("chapters")
}

model Subchapter {
  id        String   @id @default(uuid())
  chapterId String
  title     String
  page      Int
  order     Int
  createdAt DateTime @default(now())

  // Relations
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@map("subchapters")
}

model LibraryItem {
  id        String   @id @default(uuid())
  userId    String
  bookId    String
  addedAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("library_items")
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  bookId    String
  page      Int?
  note      String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("bookmarks")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  bookId    String
  rating    Int
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("reviews")
}

model ReadingProgress {
  id             String   @id @default(uuid())
  userId         String
  bookId         String
  currentPage    Int      @default(1)
  totalPages     Int
  progressPercent Float   @default(0)
  lastReadAt     DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("reading_progress")
}

model RecentlyRead {
  id        String   @id @default(uuid())
  userId    String
  bookId    String
  readAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("recently_read")
}

model Download {
  id           String   @id @default(uuid())
  userId       String
  bookId       String
  downloadedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("downloads")
}
